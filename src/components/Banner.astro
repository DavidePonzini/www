---
---
<div id="banner">
    <img id="book" src="/res/book.png" alt="Book">
    <canvas id="flowing-letters"></canvas>
</div>

<style>
    #banner {
        position: relative;
        width: 100%;
        height: calc(100vh - 56px);
        overflow: hidden;
        background: #101010;
    }

    #book {
        position: absolute;

        left: 50%;
        bottom: 300px;
        transform: translate(-50%, 0px);
        width: 300px; /* Adjust size as needed */
        z-index: 1;
    }

    #flowing-letters {
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100%;
        height: 100%;
        pointer-events: none;
    }
</style>

<script>
    // Predefine character set outside the function to avoid redundant declarations
    const characters =
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' +
      '0123456789' +
      '!@#$%^&*()=+[{]}|;:<>/?' +
      'αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ';
  
    const charactersLength = characters.length;
  
    // Generate random letters
    function generateRandomLetter() {
      return characters.charAt(Math.floor(Math.random() * charactersLength));
    }
  
    // Initialize canvas
    const canvas = document.getElementById('flowing-letters') as HTMLCanvasElement;
    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  
    const letters: { startX: number; startY: number; x: number; y: number; rotation: number; char: string; size: number; speed: number; color: string; }[] = [];
    const maxLetters = 500;
    const letterMinSpeed = 1;
    const letterMaxSpeed = 2;
    const bookHeight = 300;
    const bookRadius = 10;
    const bookOffsetY = 25;
    const letterMinSize = 5;
    const letterMaxSize = 50;
  
    // Cache DOM elements
    const bookElement = document.getElementById('book');
  
    // Create letters
    function init() {
      letters.length = 0;
  
      for (let i = 0; i < maxLetters; i++) {
        const x = Math.random() * canvas.width;
        const y = Math.random() * canvas.height;
  
        letters.push({
          startX: x,
          startY: y,
          x: x,
          y: y,
          rotation: Math.random() * Math.PI * 2,
          char: generateRandomLetter(),
          size:
            Math.random() * (letterMaxSize - letterMinSize) + letterMinSize,
          speed:
            letterMinSpeed +
            Math.random() * (letterMaxSpeed - letterMinSpeed),
          color: `rgba(255, 255, 255, ${Math.random()})`,
        });
      }
  
      update();
      draw();
    }
  
    // Draw letters
    function draw() {
      const scrollAmount = Math.min(1, window.scrollY / canvas.height);
      const bookPosY =
        canvas.height - bookHeight * (1 - scrollAmount);
      const bookPosition = {
        x: canvas.width / 2,
        y: bookPosY,
      };
  
      if (bookElement) {
        bookElement.style.transform = `translate(-50%, ${
            bookHeight * scrollAmount + bookOffsetY
        }px)`;
      }
  
      ctx.clearRect(0, 0, canvas.width, canvas.height);
  
      for (const letter of letters) {
        const dx = bookPosition.x - letter.x;
        const dy = bookPosition.y - letter.y;
        const distanceToBook = Math.hypot(dx, dy);
        if (distanceToBook < bookRadius) continue;
  
        ctx.save();
        ctx.font = `${letter.size}px Times New Roman`;
        ctx.fillStyle = letter.color;
        ctx.translate(letter.x, letter.y);
        ctx.rotate(letter.rotation);
        ctx.fillText(letter.char, 0, 0);
        ctx.restore();
      }
    }
  
    // Update letter positions
    function update() {
      const scrollAmount = Math.min(1, window.scrollY / canvas.height);
      const bookPosition = {
        x: canvas.width / 2,
        y: canvas.height - bookHeight * (1 - scrollAmount),
      };
  
      for (const letter of letters) {
        const progress = scrollAmount * letter.speed;
        letter.x = lerp(letter.startX, bookPosition.x, progress);
        letter.y = lerp(letter.startY, bookPosition.y, progress);
      }
    }
  
    // Linear interpolation function
    function lerp(start: number, end: number, t: number) {
        if (t < 1)
            return start + (end - start) * t;
        return end;
    }
  
    // Optimize resize handling with debounce
    let resizeTimeout: number | undefined;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        update();
        draw();
      }, 200);
    });
  
    // Throttle scroll events using requestAnimationFrame
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          if (window.scrollY < canvas.height) {
            update();
            draw();
          }
          ticking = false;
        });
        ticking = true;
      }
    });
  
    // Initialize after DOM is fully loaded
    document.addEventListener('DOMContentLoaded', init);
</script>
  